{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\PersonalProjects\\\\CodingChallenge\\\\employee-management\\\\client\\\\src\\\\routes\\\\timetracking\\\\viewWorkingTime\\\\ViewWorkingTimePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './viewWorkingTimePage.scss';\nimport TableComponent from '../../../components/table/Table';\nimport apiRequest from '../../../lib/apiRequest'; // Import axios instance for API calls\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ViewWorkingTimePage() {\n  _s();\n  const columns = [\"Date\", \"From\", \"To\", \"Type\", \"State\", \"Hour/Day\"];\n  const [data, setData] = useState([]); // State to hold working time requests data\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n\n  // Fetch working time requests when the component is mounted\n  useEffect(() => {\n    const fetchWorkingTimeRequests = async () => {\n      try {\n        setLoading(true); // Start loading\n        const response = await apiRequest.get('/getWorkingTimeRequests');\n        console.log(response.data);\n\n        // Format data to be displayed in the table\n        const formattedData = response.data.map(request => ({\n          Date: request.date.split('T')[0],\n          From: request.startTime,\n          // Format the start time\n          To: request.endTime,\n          // Format end time (if exists)\n          Type: \"Working Time\",\n          // Static type, you can adjust if needed\n          State: request.status,\n          // Assuming status is part of the response\n          \"Hour/Day\": request.pause || \"0\" // Assuming pause is used to calculate hours (adjust as needed)\n        }));\n        setData(formattedData); // Set the formatted data\n        setLoading(false); // Stop loading\n      } catch (err) {\n        setError('Failed to fetch working time requests'); // Set error message\n        setLoading(false); // Stop loading\n        console.error(err);\n      }\n    };\n    fetchWorkingTimeRequests(); // Fetch data on mount\n  }, []); // Empty dependency array to run the effect only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Working Time Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(TableComponent, {\n      columns: columns,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ViewWorkingTimePage, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = ViewWorkingTimePage;\nexport default ViewWorkingTimePage;\nvar _c;\n$RefreshReg$(_c, \"ViewWorkingTimePage\");","map":{"version":3,"names":["React","useState","useEffect","TableComponent","apiRequest","jsxDEV","_jsxDEV","ViewWorkingTimePage","_s","columns","data","setData","loading","setLoading","error","setError","fetchWorkingTimeRequests","response","get","console","log","formattedData","map","request","Date","date","split","From","startTime","To","endTime","Type","State","status","pause","err","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/PersonalProjects/CodingChallenge/employee-management/client/src/routes/timetracking/viewWorkingTime/ViewWorkingTimePage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './viewWorkingTimePage.scss';\r\nimport TableComponent from '../../../components/table/Table';\r\nimport apiRequest from '../../../lib/apiRequest'; // Import axios instance for API calls\r\n\r\nfunction ViewWorkingTimePage() {\r\n  const columns = [\"Date\",\"From\", \"To\", \"Type\", \"State\", \"Hour/Day\"];\r\n  \r\n  const [data, setData] = useState([]); // State to hold working time requests data\r\n  const [loading, setLoading] = useState(true); // Loading state\r\n  const [error, setError] = useState(null); // Error state\r\n\r\n  // Fetch working time requests when the component is mounted\r\n  useEffect(() => {\r\n    const fetchWorkingTimeRequests = async () => {\r\n      try {\r\n        setLoading(true); // Start loading\r\n        const response = await apiRequest.get('/getWorkingTimeRequests'); \r\n        console.log(response.data)\r\n        \r\n        // Format data to be displayed in the table\r\n        const formattedData = response.data.map((request) => ({\r\n          Date:request.date.split('T')[0] ,\r\n          From: request.startTime, // Format the start time\r\n          To: request.endTime, // Format end time (if exists)\r\n          Type: \"Working Time\", // Static type, you can adjust if needed\r\n          State: request.status, // Assuming status is part of the response\r\n          \"Hour/Day\": request.pause || \"0\", // Assuming pause is used to calculate hours (adjust as needed)\r\n        }));\r\n\r\n        setData(formattedData); // Set the formatted data\r\n        setLoading(false); // Stop loading\r\n      } catch (err) {\r\n        setError('Failed to fetch working time requests'); // Set error message\r\n        setLoading(false); // Stop loading\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    fetchWorkingTimeRequests(); // Fetch data on mount\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  return (\r\n    <div>\r\n      <h1>Working Time Overview</h1>\r\n\r\n      {/* Show loading state */}\r\n      {loading && <p>Loading...</p>}\r\n      \r\n      {/* Show error state */}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      \r\n      {/* Display the data if loaded */}\r\n      {!loading && !error && <TableComponent columns={columns} data={data} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewWorkingTimePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}