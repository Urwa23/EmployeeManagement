{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\PersonalProjects\\\\CodingChallenge\\\\employee-management\\\\client\\\\src\\\\routes\\\\login\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useAuth } from '../../context/AuthContext.jsx';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n\n  // Success callback function\n  const handleLoginSuccess = async response => {\n    try {\n      const googleToken = response.credential; // Get the Google token from the response\n\n      // Send the Google token to the backend\n      const res = await fetch('http://localhost:5000/auth/google/callback', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: googleToken\n        })\n      });\n      if (!res.ok) {\n        throw new Error('Authentication failed');\n      }\n      const data = await res.json(); // Assume the response contains JWT token and user data\n      login({\n        token: data.token,\n        user: data.user\n      });\n      console.log(\"token: \", data.token);\n      window.location.href = '/'; // Redirect to the homepage or dashboard\n    } catch (error) {\n      console.error('Login failed:', error);\n      alert('Login failed. Please try again.');\n    }\n  };\n  const handleLoginSuccessAsManager = async response => {\n    try {\n      const googleToken = response.credential; // Get the Google token from the response\n\n      // Send the Google token to the backend\n      const res = await fetch('http://localhost:5000/auth/google/callbackManager', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: googleToken\n        })\n      });\n      if (!res.ok) {\n        throw new Error('Authentication failed');\n      }\n      // console.log(\"token: \",data.token)\n      const data = await res.json(); // Assume the response contains JWT token and user data\n      login({\n        token: data.token,\n        user: data.user\n      });\n      console.log(\"token: \", data.token);\n      window.location.href = '/';\n      console.log(\"token: \", data.token);\n      // Redirect to the homepage or dashboard\n      // Redirect to the homepage or dashboard\n    } catch (error) {\n      console.error('Login failed:', error);\n      alert('Login failed. Please try again.');\n    }\n  };\n\n  // Failure callback function\n  const handleLoginFailure = () => {\n    alert('Login failed. Please try again.');\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: \"499461452738-0jtk5kn7ldtgm74lntbtabdl2p9c85ok.apps.googleusercontent.com\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"as User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleLoginSuccess,\n        onError: handleLoginFailure // Now this will work because it's defined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"As Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: handleLoginSuccessAsManager,\n        onError: handleLoginFailure // Now this will work because it's defined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"UHkfWqKqWotCJBriqTc0XaXAMSw=\", false, function () {\n  return [useAuth];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useAuth","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","LoginPage","_s","login","handleLoginSuccess","response","googleToken","credential","res","fetch","method","headers","body","JSON","stringify","token","ok","Error","data","json","user","console","log","window","location","href","error","alert","handleLoginSuccessAsManager","handleLoginFailure","clientId","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/PersonalProjects/CodingChallenge/employee-management/client/src/routes/login/LoginPage.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useAuth } from '../../context/AuthContext.jsx';\r\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\r\n\r\nconst LoginPage = () => {\r\n  const { login } = useAuth();\r\n\r\n  // Success callback function\r\n  const handleLoginSuccess = async (response) => {\r\n    try {\r\n      const googleToken = response.credential; // Get the Google token from the response\r\n  \r\n      // Send the Google token to the backend\r\n      const res = await fetch('http://localhost:5000/auth/google/callback', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ token: googleToken }),  \r\n      });\r\n  \r\n      if (!res.ok) {\r\n        throw new Error('Authentication failed');\r\n      }\r\n      \r\n      const data = await res.json(); // Assume the response contains JWT token and user data\r\n      login({ token: data.token, user: data.user });\r\n      console.log(\"token: \",data.token)\r\n      window.location.href = '/';  // Redirect to the homepage or dashboard\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      alert('Login failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleLoginSuccessAsManager = async (response) => {\r\n    try {\r\n      const googleToken = response.credential; // Get the Google token from the response\r\n  \r\n      // Send the Google token to the backend\r\n      const res = await fetch('http://localhost:5000/auth/google/callbackManager', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ token: googleToken }),  \r\n      });\r\n  \r\n      if (!res.ok) {\r\n        throw new Error('Authentication failed');\r\n      }\r\n      // console.log(\"token: \",data.token)\r\n      const data = await res.json(); // Assume the response contains JWT token and user data\r\n      login({ token: data.token, user: data.user });\r\n      console.log(\"token: \",data.token)\r\n      window.location.href = '/'; \r\n      console.log(\"token: \",data.token)\r\n       // Redirect to the homepage or dashboard\r\n       // Redirect to the homepage or dashboard\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      alert('Login failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Failure callback function\r\n  const handleLoginFailure = () => {\r\n    alert('Login failed. Please try again.');\r\n  };\r\n\r\n  return (\r\n    <GoogleOAuthProvider clientId=\"499461452738-0jtk5kn7ldtgm74lntbtabdl2p9c85ok.apps.googleusercontent.com\">\r\n      <div className=\"login-page\">\r\n        <h1>Login</h1>\r\n        <h1>as User</h1>\r\n        <GoogleLogin \r\n        \r\n          onSuccess={handleLoginSuccess} \r\n          onError={handleLoginFailure} // Now this will work because it's defined\r\n        />\r\n        <h2>\r\n          As Manager\r\n        </h2>\r\n        <GoogleLogin \r\n        \r\n          onSuccess={handleLoginSuccessAsManager} \r\n          onError={handleLoginFailure} // Now this will work because it's defined\r\n        />\r\n      </div>\r\n    </GoogleOAuthProvider>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}