{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\PersonalProjects\\\\CodingChallenge\\\\employee-management\\\\client\\\\src\\\\context\\\\TimerContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/TimerContext.js\nimport React, { createContext, useState, useContext } from \"react\";\n\n// Create a context for the timer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimerContext = /*#__PURE__*/createContext();\n\n// Timer provider to wrap the components and provide the state\nexport const TimerProvider = ({\n  children\n}) => {\n  _s();\n  const [timer, setTimer] = useState(0); // Timer state to track working time\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // State to track whether working timer is running\n  const [isPauseTimerRunning, setIsPauseTimerRunning] = useState(false); // State to track whether pause timer is running\n  const [pauseTime, setPauseTime] = useState(0); // State to track pause time\n  const [intervalId, setIntervalId] = useState(null); // Store interval ID to clear it later\n  const [pauseStartTime, setPauseStartTime] = useState(null); // Store when pause timer started\n\n  // Timer logic: Start, pause, or resume the timer\n  const toggleTimer = () => {\n    if (isTimerRunning) {\n      clearInterval(intervalId); // Stop the current working timer interval\n      setIntervalId(null); // Clear the interval ID\n      setIsTimerRunning(false); // Mark the working timer as paused\n      setIsPauseTimerRunning(true); // Start the pause timer\n      setPauseStartTime(Date.now()); // Record when the pause timer starts\n    } else if (isPauseTimerRunning) {\n      const id = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1); // Increment working timer every second\n      }, 1000);\n      setIntervalId(id); // Save the interval ID to stop it later\n      setIsTimerRunning(true); // Resume the working timer\n      setIsPauseTimerRunning(false); // Stop the pause timer\n      setPauseStartTime(null); // Reset the pause start time after resuming\n    } else {\n      const id = setInterval(() => {\n        setTimer(prevTimer => prevTimer + 1); // Increment working timer every second\n      }, 1000);\n      setIntervalId(id); // Save the interval ID to stop it later\n      setIsTimerRunning(true); // Set the working timer state to \"running\"\n    }\n  };\n\n  // Handle pause timer logic (update pauseTime)\n  const updatePauseTime = () => {\n    if (isPauseTimerRunning && pauseStartTime) {\n      setPauseTime(prevPauseTime => prevPauseTime + 1);\n    }\n  };\n\n  // Update pause time every second\n  React.useEffect(() => {\n    let pauseInterval;\n    if (isPauseTimerRunning && pauseStartTime) {\n      pauseInterval = setInterval(updatePauseTime, 1000);\n    }\n    return () => clearInterval(pauseInterval);\n  }, [isPauseTimerRunning, pauseStartTime]);\n\n  // Reset all timers\n  const resetTimer = () => {\n    clearInterval(intervalId); // Clear the interval\n    setIsTimerRunning(false); // Set timer state to stopped\n    setIsPauseTimerRunning(false); // Set pause timer state to stopped\n    setTimer(0); // Reset the timer\n    setPauseTime(0); // Reset the pause timer\n    setIntervalId(null); // Clear intervalId\n    setPauseStartTime(null); // Reset the pause start time\n  };\n  return /*#__PURE__*/_jsxDEV(TimerContext.Provider, {\n    value: {\n      timer,\n      isTimerRunning,\n      isPauseTimerRunning,\n      pauseTime,\n      toggleTimer,\n      resetTimer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to access the timer context\n_s(TimerProvider, \"Oo13GedWS/j+yiKMu860FX5cYrs=\");\n_c = TimerProvider;\nexport const useTimer = () => {\n  _s2();\n  return useContext(TimerContext);\n};\n_s2(useTimer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"TimerProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","TimerContext","TimerProvider","children","_s","timer","setTimer","isTimerRunning","setIsTimerRunning","isPauseTimerRunning","setIsPauseTimerRunning","pauseTime","setPauseTime","intervalId","setIntervalId","pauseStartTime","setPauseStartTime","toggleTimer","clearInterval","Date","now","id","setInterval","prevTimer","updatePauseTime","prevPauseTime","useEffect","pauseInterval","resetTimer","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimer","_s2","$RefreshReg$"],"sources":["C:/Users/HP/Documents/PersonalProjects/CodingChallenge/employee-management/client/src/context/TimerContext.jsx"],"sourcesContent":["// src/context/TimerContext.js\r\nimport React, { createContext, useState, useContext } from \"react\";\r\n\r\n// Create a context for the timer\r\nconst TimerContext = createContext();\r\n\r\n// Timer provider to wrap the components and provide the state\r\nexport const TimerProvider = ({ children }) => {\r\n  const [timer, setTimer] = useState(0);  // Timer state to track working time\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // State to track whether working timer is running\r\n  const [isPauseTimerRunning, setIsPauseTimerRunning] = useState(false); // State to track whether pause timer is running\r\n  const [pauseTime, setPauseTime] = useState(0);  // State to track pause time\r\n  const [intervalId, setIntervalId] = useState(null);  // Store interval ID to clear it later\r\n  const [pauseStartTime, setPauseStartTime] = useState(null); // Store when pause timer started\r\n\r\n  // Timer logic: Start, pause, or resume the timer\r\n  const toggleTimer = () => {\r\n    if (isTimerRunning) {\r\n      clearInterval(intervalId);  // Stop the current working timer interval\r\n      setIntervalId(null);  // Clear the interval ID\r\n      setIsTimerRunning(false);  // Mark the working timer as paused\r\n      setIsPauseTimerRunning(true);  // Start the pause timer\r\n      setPauseStartTime(Date.now());  // Record when the pause timer starts\r\n    } else if (isPauseTimerRunning) {\r\n      const id = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer + 1);  // Increment working timer every second\r\n      }, 1000);\r\n      setIntervalId(id);  // Save the interval ID to stop it later\r\n      setIsTimerRunning(true);  // Resume the working timer\r\n      setIsPauseTimerRunning(false);  // Stop the pause timer\r\n      setPauseStartTime(null);  // Reset the pause start time after resuming\r\n    } else {\r\n      const id = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer + 1);  // Increment working timer every second\r\n      }, 1000);\r\n      setIntervalId(id);  // Save the interval ID to stop it later\r\n      setIsTimerRunning(true);  // Set the working timer state to \"running\"\r\n    }\r\n  };\r\n\r\n  // Handle pause timer logic (update pauseTime)\r\n  const updatePauseTime = () => {\r\n    if (isPauseTimerRunning && pauseStartTime) {\r\n      setPauseTime((prevPauseTime) => prevPauseTime + 1);\r\n    }\r\n  };\r\n\r\n  // Update pause time every second\r\n  React.useEffect(() => {\r\n    let pauseInterval;\r\n    if (isPauseTimerRunning && pauseStartTime) {\r\n      pauseInterval = setInterval(updatePauseTime, 1000);\r\n    }\r\n\r\n    return () => clearInterval(pauseInterval);\r\n  }, [isPauseTimerRunning, pauseStartTime]);\r\n\r\n  // Reset all timers\r\n  const resetTimer = () => {\r\n    clearInterval(intervalId);  // Clear the interval\r\n    setIsTimerRunning(false);  // Set timer state to stopped\r\n    setIsPauseTimerRunning(false);  // Set pause timer state to stopped\r\n    setTimer(0);  // Reset the timer\r\n    setPauseTime(0);  // Reset the pause timer\r\n    setIntervalId(null);  // Clear intervalId\r\n    setPauseStartTime(null);  // Reset the pause start time\r\n  };\r\n\r\n  return (\r\n    <TimerContext.Provider\r\n      value={{\r\n        timer,\r\n        isTimerRunning,\r\n        isPauseTimerRunning,\r\n        pauseTime,\r\n        toggleTimer,\r\n        resetTimer,\r\n      }}\r\n    >\r\n      {children}\r\n    </TimerContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to access the timer context\r\nexport const useTimer = () => {\r\n  return useContext(TimerContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}